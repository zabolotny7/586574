// ==== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ====
const API_PATH = "/api/order?limit=10000&offset=0&status_id=in%3A5%2C6%2C13%2C14%2C20%2C9%2C10%2C12%2C17%2C18%2C19%2C11";
const MAX_ROWS = 15000;
const CRM_DOMAIN = "{{CRM_URL}}"; // –ü–æ–¥—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ—é —Å—Å—ã–ª–∫—É –Ω–∞ CRM

const STATUS_MAP = {
  '1': '–ù–æ–≤–∞—è', '2': '–ù–æ–≤–∞—è', '4': '–û—Ç–º–µ–Ω–∞', '5': '–ü—Ä–∏–Ω—è—Ç–∞',
  '6': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞', '9': '–û–ø–ª–∞—á–µ–Ω–æ', '10': '–î–æ—Å—Ç–∞–≤–∫–∞',
  '11': '–í–æ–∑–≤—Ä–∞—Ç', '12': '–ü—Ä–∏–±—ã–ª', '13': '–£–ø–∞–∫–æ–≤–∫–∞',
  '14': '–°—Ç–∞—Ç—É—Å 14', '17': '–°—Ç–∞—Ç—É—Å 17', '18': '–°—Ç–∞—Ç—É—Å 18',
  '19': '–£–∫—Ä–ü–æ—á—Ç–∞ –î–æ—Å—Ç–∞–≤–∫–∞', '20': '–£–∫—Ä–ü–æ—á—Ç–∞ –ü—Ä–∏–Ω—è—Ç–æ'
};

// ==== –ó–∞–≥—Ä—É–∑–∫–∞ XLSX ====
try {
  importScripts && importScripts('./xlsx.full.min.js');
} catch (error) {
  console.warn('–ï—Å–ª–∏ –Ω–µ –≤ –≤–æ—Ä–∫–µ—Ä–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É importScripts');
}

// ==== –ö–Ω–æ–ø–∫–∞ ====
const button = document.createElement('button');
button.innerHTML = `
  <span style="
    display: inline-block;
    vertical-align: middle;
    margin-right: 8px;
    font-size: 16px;
  ">üòà</span> 
–°–∫–∞—á–∞—Ç—å —Ç—Ä–∞—Ñ–∏–∫`;

button.style = `
  position: fixed;
  bottom: 25px;
  right: 25px;
  z-index: 99999;
  padding: 12px 20px;
  background: #ff0000;
  color: white;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-family: Arial;
  font-size: 14px;
  font-weight: bold;
  text-transform: uppercase;
  box-shadow: 0 3px 12px rgba(255, 0, 0, 0.3);
  transition: all 0.2s;
  text-shadow: 0 1px 2px rgba(0,0,0,0.3);
`;

button.addEventListener('mouseenter', () => {
  button.style.background = '#cc0000';
  button.style.transform = 'translateY(-2px)';
  button.style.boxShadow = '0 5px 15px rgba(255, 0, 0, 0.4)';
});
button.addEventListener('mouseleave', () => {
  button.style.background = '#ff0000';
  button.style.transform = 'translateY(0)';
  button.style.boxShadow = '0 3px 12px rgba(255, 0, 0, 0.3)';
});
button.addEventListener('mousedown', () => {
  button.style.transform = 'translateY(1px)';
  button.style.boxShadow = '0 1px 5px rgba(255, 0, 0, 0.4)';
});
button.addEventListener('mouseup', () => {
  button.style.transform = 'translateY(-2px)';
});
button.addEventListener('click', async () => {
  try {
    button.disabled = true;
    button.style.opacity = '0.7';

    const token = localStorage.getItem('user-token');
    if (!token) throw new Error('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');

    await exportHandler(token);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
    alert(`–û—à–∏–±–∫–∞: ${error.message}`);
  } finally {
    button.disabled = false;
    button.style.opacity = '1';
  }
});
document.body.appendChild(button);

// ==== –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö ====
async function exportHandler(token) {
  if (typeof XLSX === 'undefined') throw new Error('–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ XLSX –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');

  const response = await fetch(`${CRM_DOMAIN}${API_PATH}`, {
    headers: { 'Authorization': `Bearer ${token}` }
  });

  if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ ${response.status}`);
  const { data } = await response.json();

  if (!data?.length) throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');

  const exportData = data.length > MAX_ROWS 
    ? data.slice(0, MAX_ROWS)
    : data;

  const rows = exportData.map(item => ({
    '–§–ò–û': item.full_name || '‚Äî',
    '–¢–µ–ª–µ—Ñ–æ–Ω': item.phone || '‚Äî',
    '–°—É–º–º–∞': item.price || 0,
    '–°—Ç–∞—Ç—É—Å': STATUS_MAP[item.status_id] || item.status_id,
    '–î–∞—Ç–∞': item.last_status_change_date || '‚Äî',
    '–û—Ç–¥–µ–ª–µ–Ω–∏–µ': item.delivery?.warehouse || '‚Äî',
    '–ì–æ—Ä–æ–¥': item.delivery?.city || '‚Äî',
    '–¢–æ–≤–∞—Ä': item.delivery?.parcel_info || '‚Äî',
    '–¢–¢–ù': item.delivery?.ttn_number || '‚Äî',
    '–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏': item.delivery?.ttn_status_name || '‚Äî'
  }));

  const workbook = XLSX.utils.book_new();
  const worksheet = XLSX.utils.json_to_sheet(rows);
  XLSX.utils.book_append_sheet(workbook, worksheet, "–ó–∞–∫–∞–∑—ã");

  const excelBuffer = XLSX.write(workbook, {
    bookType: 'xlsx',
    type: 'array'
  });

  const base64 = bufferToBase64(excelBuffer);

  chrome.downloads.download({
    url: `data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,${base64}`,
    filename: `CRM_Export_${Date.now()}.xlsx`,
    saveAs: true
  });
}

function bufferToBase64(buffer) {
  const bytes = new Uint8Array(buffer);
  const chunkSize = 32768;
  let output = '';

  for (let i = 0; i < bytes.length; i += chunkSize) {
    const chunk = bytes.subarray(i, i + chunkSize);
    output += String.fromCharCode(...chunk);
  }

  return btoa(output);
}
